name: CD
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-and-release-tarball:
    name: Releasee ${{ matrix.arch }}
    strategy:
      matrix:
        version: ["lts"] # julia version
        arch:
          - x64
          - arm64
        include:
          - arch: x64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Print system architecture
        run: uname -m

      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}

      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-

      - name: Build and package app tarball
        run: |
          julia build.jl -t auto -O3 --startup-file=no --heap-size-hint=6G
          mv target stonks
          tar -czf stonks_${{ matrix.arch }}.tar.gz stonks > errors.txt
          cat ./errors.txt 

      - name: Upload app tarball
        uses: actions/upload-artifact@v4
        with:
          name: stonks_${{ matrix.arch }}.tar.gz
          path: stonks_${{ matrix.arch }}.tar.gz
          if-no-files-found: error
          retention-days: 1

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: stonks_${{ matrix.arch }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.STONKS_GITHUB_TOKEN }}

  # build-and-release-docker:
    # needs: 
    #   - build-and-release-tarball
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     platform:
    #       - linux/amd64
    #       - linux/arm64
    # runs-on: ${{ matrix.runner }}

  #   steps:
  #     - name: Prepare
  #       run: |
  #         platform=${{ matrix.platform }}
  #         echo "platform_pair=${platform//\//-}" >> $github_env
  #         echo "version=${github_ref#refs/tags/v}" >> $github_env
  #         # TODO: platorm to either x64 or arm64


  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY_IMAGE }}
            
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Download release artifact
  #       run: |
  #         curl -L -H "Authorization: token ${{ secrets.STONKS_GITHUB_TOKEN }}" \
  #           -o stonks_${{ matrix.arch }}.tar.gz \
  #           https://api.github.com/repos/${{ github.actor }}/stonks/releases/download/v0.1.0/stonks_${{ matrix.arch }}.tar.gz
        
  #     - name: Unpack artifact
  #       run: |
  #         mkdir -p target
  #         tar -zxvf stonks_${{ matrix.arch }}.tar.gz -C target
  #         rm stonks_${{ matrix.arch }}.tar.gz

  #     - name: Build and push by digest
  #       id: build
  #       uses: docker/build-push-action@v6
  #       with:
  #         platforms: ${{ matrix.platform }}
  #         file: Dockerfile-ci
  #         labels: ${{ steps.meta.outputs.labels }}
  #         tags: | 
  #           ${{ env.REGISTRY_IMAGE }}
  #         outputs: type=image,push-by-digest=true,name-canonical=true,push=true

  #     - name: Export digest
  #       run: |
  #         mkdir -p ${{ runner.temp }}/digests
  #         digest="${{ steps.build.outputs.digest }}"
  #         touch "${{ runner.temp }}/digests/${digest#sha256:}"

  #     - name: Upload digest
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: digests-${{ env.PLATFORM_PAIR }}
  #         path: ${{ runner.temp }}/digests/*
  #         if-no-files-found: error
  #         retention-days: 1

  # merge-docker:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-and-release-docker

  #   steps:
  #     - name: Download digests
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: ${{ runner.temp }}/digests
  #         pattern: digests-*
  #         merge-multiple: true

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY_IMAGE }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}

  #     - name: Create manifest list and push
  #       working-directory: ${{ runner.temp }}/digests
  #       run: |
  #         docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
  #           $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

  #     - name: Inspect image
  #       run: |
  #         docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
